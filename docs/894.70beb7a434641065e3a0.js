(self.webpackChunkwebpack_x=self.webpackChunkwebpack_x||[]).push([[894],{894:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(279),i=n.n(r);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==o(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key,"string"),"symbol"===o(i)?i:String(i)),r)}var i}const u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.injectHtml(),this.element=document.getElementById("measureME"),this.measure=document.querySelector(".measure"),this.closeIcon=document.querySelector(".measure__close"),this.browserWidthOuter=window.outerWidth,this.browserWidth=window.innerWidth,this.browserHeightOuter=window.outerHeight,this.browserHeight=window.innerHeight,document.getElementById("outerWidth").innerHTML=this.browserWidthOuter,document.getElementById("innerWidth").innerHTML=this.browserWidth,document.getElementById("outerHeight").innerHTML=this.browserHeightOuter,document.getElementById("innerHeight").innerHTML=this.browserHeight,document.getElementById("documentHeight").innerHTML=this.getHeight().toFixed(),document.getElementById("el-offsetTop").innerHTML=this.element.offsetTop,document.getElementById("el-offsetHeight").innerHTML=this.element.offsetHeight,document.getElementById("scrollY").innerHTML=0,this.events()}var t,n;return t=e,(n=[{key:"events",value:function(){var e=this;this.closeIcon.addEventListener("click",(function(){return e.closeTheMeasure()})),document.addEventListener("keyup",(function(t){return e.keyPressHandler(t)})),window.addEventListener("scroll",(function(){var t=e.element.getBoundingClientRect(),n=t.y/e.browserHeight*100;document.getElementById("scrollPercent").innerHTML=n.toFixed(),document.getElementById("scrollY").innerHTML=scrollY.toFixed(),document.getElementById("sh").innerHTML=(scrollY+e.browserHeight).toFixed(),document.getElementById("demo").innerHTML="Left: "+t.left.toFixed()+"<br>Top: "+t.y.toFixed()+"<br>Width: "+t.width.toFixed()+"<br>Height: "+t.height.toFixed()})),window.addEventListener("resize",i()((function(){e.browserWidthOuter=window.outerWidth,e.browserWidth=window.innerWidth,e.browserHeightOuter=window.outerHeight,e.browserHeight=window.innerHeight,document.getElementById("outerWidth").innerHTML=e.browserWidthOuter,document.getElementById("innerWidth").innerHTML=e.browserWidth,document.getElementById("outerHeight").innerHTML=e.browserHeightOuter,document.getElementById("innerHeight").innerHTML=e.browserHeight}),333))}},{key:"openTheMeasure",value:function(){this.measure.classList.add("measure--is-visible")}},{key:"closeTheMeasure",value:function(){this.measure.classList.remove("measure--is-visible")}},{key:"keyPressHandler",value:function(e){27==e.keyCode&&this.closeTheMeasure()}},{key:"getHeight",value:function(){var e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,e.offsetHeight,e.getBoundingClientRect().height,t.clientHeight,t.scrollHeight,t.offsetHeight)}},{key:"injectHtml",value:function(){document.body.insertAdjacentHTML("beforeend",'\n    <div class="measure">\n      <div class="measure__close">X</div>\n      <p>win.outerWidth <span id="outerWidth"></span></p>\n      <p>win.innerWidth <span id="innerWidth"></span></p>\n      <p>win.outerHeight <span id="outerHeight"></span></p>\n      <p>win.innerHeight <span id="innerHeight"></span></p>\n      <p>doc.height <span id="documentHeight"></span></p>\n      <p>doc.scrollY <span id="scrollY"></span></p>\n      <p>doc.scrollY + <br> win.innerHeight <span id="sh"></span></p>\n      <p>el.offsetTop <span id="el-offsetTop"></span></p>\n      <p>el.offsetHeight <span id="el-offsetHeight"></span></p>\n      <hr />\n      <p>el.BoundingClientRect</p>\n      <p>el.scrollPercent %<span id="scrollPercent"> </span></p>\n      <p id="demo"></p>\n    </div>\n    ')}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},705:(e,t,n)=>{var r=n(639).Symbol;e.exports=r},239:(e,t,n)=>{var r=n(705),i=n(607),o=n(333),s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":s&&s in Object(e)?i(e):o(e)}},561:(e,t,n)=>{var r=n(990),i=/^\s+/;e.exports=function(e){return e?e.slice(0,r(e)+1).replace(i,""):e}},957:(e,t,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=r},607:(e,t,n)=>{var r=n(705),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var i=s.call(e);return r&&(t?e[u]=n:delete e[u]),i}},333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},639:(e,t,n)=>{var r=n(957),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();e.exports=o},990:e=>{var t=/\s/;e.exports=function(e){for(var n=e.length;n--&&t.test(e.charAt(n)););return n}},279:(e,t,n)=>{var r=n(218),i=n(771),o=n(841),s=Math.max,u=Math.min;e.exports=function(e,t,n){var c,l,d,a,f,h,p=0,m=!1,g=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(t){var n=c,r=l;return c=l=void 0,p=t,a=e.apply(r,n)}function b(e){return p=e,f=setTimeout(H,t),m?y(e):a}function w(e){var n=e-h;return void 0===h||n>=t||n<0||g&&e-p>=d}function H(){var e=i();if(w(e))return T(e);f=setTimeout(H,function(e){var n=t-(e-h);return g?u(n,d-(e-p)):n}(e))}function T(e){return f=void 0,v&&c?y(e):(c=l=void 0,a)}function x(){var e=i(),n=w(e);if(c=arguments,l=this,h=e,n){if(void 0===f)return b(h);if(g)return clearTimeout(f),f=setTimeout(H,t),y(h)}return void 0===f&&(f=setTimeout(H,t)),a}return t=o(t)||0,r(n)&&(m=!!n.leading,d=(g="maxWait"in n)?s(o(n.maxWait)||0,t):d,v="trailing"in n?!!n.trailing:v),x.cancel=function(){void 0!==f&&clearTimeout(f),p=0,c=h=l=f=void 0},x.flush=function(){return void 0===f?a:T(i())},x}},218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},5:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},448:(e,t,n)=>{var r=n(239),i=n(5);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==r(e)}},771:(e,t,n)=>{var r=n(639);e.exports=function(){return r.Date.now()}},841:(e,t,n)=>{var r=n(561),i=n(218),o=n(448),s=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,c=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(i(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=r(e);var n=u.test(e);return n||c.test(e)?l(e.slice(2),n?2:8):s.test(e)?NaN:+e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,